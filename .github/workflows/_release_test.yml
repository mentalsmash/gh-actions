name: Release Step (Test Image)
run-name: |
  release (test image) [${{github.ref_type == 'branch' && 'nightly' || 'stable'}}, ${{github.ref_name}}]

on:
  workflow_call:

  workflow_dispatch:

concurrency:
  group: release-test-image-${{ github.ref }}

env:
  CLONE_DIR: src/repo

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      LOCAL_TESTER_IMAGE: ${{ steps.config.outputs.LOCAL_TESTER_IMAGE }}
      LOCAL_TESTER_RESULTS: ${{ steps.config.outputs.LOCAL_TESTER_RESULTS }}
      LOGIN_DOCKERHUB: ${{ steps.config.outputs.LOGIN_DOCKERHUB }}
      LOGIN_GITHUB: ${{ steps.config.outputs.LOGIN_GITHUB }}
      PRERELEASE_IMAGE: ${{ steps.config.outputs.PRERELEASE_IMAGE }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_DATE: ${{ steps.config.outputs.TEST_DATE }}
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
      TEST_RUNNERS_MATRIX: ${{ steps.config.outputs.TEST_RUNNERS_MATRIX }}
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true

      - name: Configure workflow
        id: config
        shell: python
        run: |
          import sys
          sys.path.insert(0, "${{ env.CLONE_DIR }}/.github")
          from workflows_pyconfig import configure
          configure(
            workflow="release_test",
            github="""${{ toJson(github) }}""",
            outputs="""\
              LOCAL_TESTER_IMAGE = cfg.ci.local_tester_image
              LOCAL_TESTER_RESULTS = cfg.ci.local_tester_results
              LOGIN_DOCKERHUB = cfg.dyn.prerelease.login_dockerhub
              LOGIN_GITHUB = cfg.dyn.prerelease.login_github
              PRERELEASE_IMAGE = cfg.dyn.prerelease.image
              TEST_DATE = cfg.dyn.test_date
              TEST_RUNNERS_MATRIX=cfg.dyn.release.test_runners_matrix
            """)

  test:
    needs: config
    strategy:
      matrix:
        runner: ${{ fromJson(needs.config.outputs.TEST_RUNNERS_MATRIX) }} 
    runs-on: ${{ fromJson(matrix.runner) }}
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub
        if: needs.config.outputs.LOGIN_GITHUB
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        if: needs.config.outputs.LOGIN_DOCKERHUB
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Determine runner platform
        id: platform
        run: |
          case "$(uname -m)" in
            x86_64)
              arch=amd64
              platform=linux/amd64
              ;;
            aarch64)
              arch=arm64
              platform=linux/arm64
              ;;
            *)
              echo "unsupported platform: $(uname -m)"
              ;;
          esac
          (
            echo ARCH=${arch}
            echo PLATFORM=${platform}
          ) >> ${GITHUB_OUTPUT}


      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: ${{ env.CLONE_DIR }}/docker/test/Dockerfile
          tags: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}
          load: true
          context: ${{ env.CLONE_DIR }}
          platforms: ${{ steps.platform.outputs.PLATFORM }}
          build-args: |
            BASE_IMAGE=${{ needs.config.outputs.PRERELEASE_IMAGE }}
    
      - name: Run tests
        run: |
          make -C ${{ env.CLONE_DIR }} test-release
        env:
          DEBUG: ${{ runner.debug }}
          LOCAL_TESTER_IMAGE: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}
          LOCAL_TESTER_RESULTS: ${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}
          TEST_DATE: ${{ needs.config.outputs.TEST_DATE }}
          TEST_ID: ${{ needs.config.outputs.TEST_ID }}__${{ steps.platform.outputs.ARCH }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ needs.config.outputs.TEST_ARTIFACT }}__${{ steps.platform.outputs.ARCH }}
          path: ${{ env.CLONE_DIR }}/${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}/**
