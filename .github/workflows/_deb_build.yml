name: Deb Release (Build & Test)
run-name: |
  deb release (build & test) [${{github.ref_name}}]

on:
  workflow_dispatch:
    inputs:
      base-image:
        description: Base distribution image
        type: string
        required: true
      build-architecture:
        description: Build architecture
        type: string
        required: true

  workflow_call:
    inputs:
      base-image:
        type: string
        required: true
      build-architecture:
        type: string
        required: true

concurrency:
  group: deb-release-${{ github.ref }}-${{inputs.build-architecture}}-${{inputs.base-image}}
  cancel-in-progress: true

permissions:
  packages: read
  contents: read

env:
  CLONE_DIR: src/repo

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      DEB_ARTIFACT: ${{ steps.config.outputs.DEB_ARTIFACT }}
      DEB_BUILDER: ${{ steps.config.outputs.DEB_BUILDER }}
      DEB_DIST_DIR: ${{ steps.config.outputs.DEB_DIST_DIR }}
      DEB_RUNNER: ${{ steps.config.outputs.DEB_RUNNER }}
      LOGIN_DOCKERHUB: ${{ steps.config.outputs.LOGIN_DOCKERHUB }}
      LOGIN_GITHUB: ${{ steps.config.outputs.LOGIN_GITHUB }}
      LOCAL_TESTER_IMAGE: ${{ steps.config.outputs.LOCAL_TESTER_IMAGE }}
      LOCAL_TESTER_RESULTS: ${{ steps.config.outputs.LOCAL_TESTER_RESULTS }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_DATE: ${{ steps.config.outputs.TEST_DATE }}
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true
      
      - name: Configure workflow
        id: config
        shell: python
        run: |
          import sys
          sys.path.insert(0, "${{ env.CLONE_DIR }}/.github")
          from workflows_pyconfig import configure
          configure(
            workflow="deb_build",
            github="""${{ toJson(github) }}""",
            outputs="""\
              DEB_DIST_DIR = cfg.debian.artifacts.dist_dir
              LOCAL_TESTER_IMAGE = cfg.ci.images.local_tester.image
              LOCAL_TESTER_RESULTS = cfg.ci.test.results_dir
              LOGIN_DOCKERHUB = cfg.debian.builder.login.dockerhub
              LOGIN_GITHUB = cfg.debian.builder.login.github
              TEST_DATE = cfg.build.date
            """,
            inputs="""${{ toJson(inputs) }}""")

  build-packages:
    needs: config
    runs-on: ${{ fromJson(needs.config.outputs.DEB_RUNNER) }}
    steps:
    - name: Clone source repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.CLONE_DIR }}
        submodules: true

    - name: Log in to GitHub
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build debian packages
      run: |
        make -C ${{ env.CLONE_DIR }} changelog
        make -C ${{ env.CLONE_DIR }} debuild
      env:
        DEB_BUILDER: ${{ needs.config.outputs.DEB_BUILDER }}
        DEB_DIST_DIR: ${{ needs.config.outputs.DEB_DIST_DIR }}
  
    - name: Upload debian packages
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.config.outputs.DEB_ARTIFACT }}
        path: ${{ env.CLONE_DIR }}/${{ needs.config.outputs.DEB_DIST_DIR }}/*

    - name: Fix permissions
      run: |
        docker run --rm \
          -v $(pwd)/${{ env.CLONE_DIR }}:/repo \
          ubuntu:latest \
          chown -Rv $(id -u):$(id -g) /repo
      if: always()

  test-packages:
    needs:
      - config
      - build-packages
    runs-on: ${{ fromJson(needs.config.outputs.DEB_RUNNER) }}
    steps:
    - name: Clone source repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.CLONE_DIR }}
        submodules: true

    - name: Download debian packages artifact
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ needs.config.outputs.DEB_ARTIFACT }}

    - name: Move artifacts in place
      run: |
        mkdir -p ${{ env.CLONE_DIR}}/${{ needs.config.outputs.DEB_DIST_DIR }}
        mv -v ${{ needs.config.outputs.DEB_ARTIFACT }}/* \
          ${{ env.CLONE_DIR}}/${{ needs.config.outputs.DEB_DIST_DIR }}/

    - name: Log in to GitHub
      uses: docker/login-action@v3
      if: needs.config.outputs.LOGIN_GITHUB
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      if: needs.config.outputs.LOGIN_DOCKERHUB
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build tester image
      uses: docker/build-push-action@v5
      with:
        file: ${{ env.CLONE_DIR }}/docker/debian-tester/Dockerfile
        tags: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}
        load: true
        context: ${{ env.CLONE_DIR }}
        build-args: |
          BASE_IMAGE=${{ inputs.base-image }}

    - name: Run tests
      run: |
        make -C ${{ env.CLONE_DIR}} test-deb
      env:
        DEBUG: ${{ runner.debug }}
        TEST_DATE: ${{ needs.config.outputs.TEST_DATE }}
        TEST_ID: ${{ needs.config.outputs.TEST_ID }}
        LOCAL_TESTER_IMAGE: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}
        LOCAL_TESTER_RESULTS: ${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}

    # Always collect and upload available test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ needs.config.outputs.TEST_ARTIFACT }}
        path: ${{ env.CLONE_DIR }}/${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}/**
      if: always()

