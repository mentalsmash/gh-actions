name: CI Build'n'Test
run-name: |
  CI build-n-test (${{inputs.base-image}}, ${{inputs.build-platform}}) [${{github.ref_name}}${{github.ref_type == 'branch' && '@' || ''}}${{github.ref_type == 'branch' && github.sha || ''}}]

on:
  workflow_call:
    inputs:
      base-image:
        type: string
        required: true
      build-platform:
        type: string
        required: true

  workflow_dispatch:
    inputs:
      base-image:
        description: "base OS image"
        type: string
        required: true
      build-platform:
        description: "build platform"
        type: string
        required: true

concurrency:
  group: ci-build-${{ github.ref }}-${{ inputs.build-platform }}-${{ inputs.base-image }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

env:
  CLONE_DIR: src/repo

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      CI_RUNNER: ${{ steps.config.outputs.CI_RUNNER }}
      CI_TESTER_IMAGE: ${{ steps.config.outputs.CI_TESTER_IMAGE }}
      LOCAL_TESTER_IMAGE: ${{ steps.config.outputs.LOCAL_TESTER_IMAGE }}
      LOCAL_TESTER_RESULTS: ${{ steps.config.outputs.LOCAL_TESTER_RESULTS }}
      LOGIN_GITHUB: ${{ steps.config.outputs.LOGIN_GITHUB }}
      LOGIN_DOCKERHUB: ${{ steps.config.outputs.LOGIN_DOCKERHUB }}
      TEST_ARTIFACT: ${{ steps.config.outputs.TEST_ARTIFACT }}
      TEST_DATE: ${{ steps.config.outputs.TEST_DATE }}
      TEST_ID: ${{ steps.config.outputs.TEST_ID }}
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true
      
      - name: Configure workflow
        id: config
        shell: python
        run: |
          import sys
          sys.path.insert(0, "${{ env.CLONE_DIR }}/.github")
          from workflows_pyconfig import configure
          configure(
            workflow="ci_build",
            github="""${{ toJson(github) }}""",
            outputs="""\
              LOCAL_TESTER_IMAGE = cfg.ci.images.local_tester.image
              LOCAL_TESTER_RESULTS = cfg.ci.test.results_dir
              LOGIN_DOCKERHUB = cfg.ci.images.local_tester.login.dockerhub
              LOGIN_GITHUB = cfg.ci.images.local_tester.login.github
              TEST_DATE = cfg.build.date
            """,
            inputs="""${{ toJson(inputs) }}""")
      
      - name: Validate code
        run: |
          make -C ${{ env.CLONE_DIR }} code-check

  build-n-test:
    needs: config
    runs-on: ${{ fromJson(needs.config.outputs.CI_RUNNER) }}
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

        # Assumption: CI_TAG is private/internal and requires login
        # either on GitHub or DockerHub
      - name: Log in to GitHub
        if: needs.config.outputs.LOGIN_GITHUB
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker HUb
        if: needs.config.outputs.LOGIN_DOCKERHUB
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build tester image
        uses: docker/build-push-action@v5
        with:
          file: ${{env.CLONE_DIR}}/docker/Dockerfile
          tags: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}
          load: true
          context: ${{env.CLONE_DIR}}
          platforms: ${{ inputs.build-platform }}
          build-args: |
            TEST=y
            BASE_IMAGE=${{ needs.config.outputs.CI_TESTER_IMAGE }}

      - name: Run tests
        run: |
          make -C ${{ env.CLONE_DIR }} test-ci
        env:
          DEBUG: ${{ runner.debug }}
          TEST_DATE: ${{ needs.config.outputs.TEST_DATE }}
          TEST_ID: ${{ needs.config.outputs.TEST_ID }}
          LOCAL_TESTER_RESULTS: ${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}
          LOCAL_TESTER_IMAGE: ${{ needs.config.outputs.LOCAL_TESTER_IMAGE }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ needs.config.outputs.TEST_ARTIFACT }}
          path: ${{ env.CLONE_DIR }}/${{ needs.config.outputs.LOCAL_TESTER_RESULTS }}/**

