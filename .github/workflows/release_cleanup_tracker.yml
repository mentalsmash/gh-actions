name: Release (Cleanup - Tracker)
run-name: |
  release tracker cleanup [${{github.ref_type == 'tag' && 'stable' || 'nightly' }}, ${{github.ref_name}}]

on:
  workflow_dispatch:

  workflow_call:

concurrency:
  group: release-tracker
  cancel-in-progress: false

permissions:
  actions: write
  packages: read

env:
  CLONE_DIR: src/repo

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.CLONE_DIR }}
          submodules: true

      - name: Load configuration
        uses: mentalsmash/actions/pyconfig/configuration@master
        with:
          clone-dir: ${{ env.CLONE_DIR }}
  
      - name: Configure workflow
        id: config
        run: |
          (
            printf -- "ADMIN_IMAGE=%s\n" "$(jq '.ci.images.admin.image' -r pyconfig.json)"
            printf -- "BUILD_PROFILE=%s\n" "$(jq '.build.profile' -r pyconfig.json)"
            printf -- "BUILD_VERSION=%s\n" "$(jq '.build.version' -r pyconfig.json)"
            printf -- "GH_ORG=%s\n" "$(jq '.release.gh.org' -r pyconfig.json)"
            printf -- "GH_PACKAGE=%s\n" "$(jq '.release.gh.package' -r pyconfig.json)"
            echo "RELEASE_FINAL_IMAGES<<EOF"
            jq '.release.final_images_config' -r pyconfig.json
            echo
            echo EOF
            printf -- "TRACKER_USER_NAME=%s\n" "$(jq '.release.tracker.user.name' -r pyconfig.json)"
            printf -- "TRACKER_USER_EMAIL=%s\n" "$(jq '.release.tracker.user.email' -r pyconfig.json)"
            printf -- "TRACKER_REPO=%s\n" "$(jq '.release.tracker.repository' -r pyconfig.json)"
            printf -- "LOGIN_DOCKERHUB=%s\n" "$(jq '.ci.images.admin.login.dockerhub' -r pyconfig.json)"
            printf -- "LOGIN_GITHUB=%s\n" "$(jq '.ci.images.admin.login.github' -r pyconfig.json)"
          ) | tee -a ${GITHUB_OUTPUT}

      - name: Clone release tracker
        uses: mentalsmash/actions/release-tracker/checkout@master
        if: steps.config.outputs.GH_PACKAGE
        with:
          repository: ${{ steps.config.outputs.TRACKER_REPO }}
          user-name: ${{ steps.config.outputs.TRACKER_USER_NAME }}
          user-email: ${{ steps.config.outputs.TRACKER_USER_EMAIL }}
          token: ${{ secrets.RELEASE_TRACKER_REPO_PAT }}

      - name: Generate list of prunable docker layers
        uses: mentalsmash/actions/release-tracker/find-prunable-docker@master
        if: steps.config.outputs.GH_PACKAGE
        id: layers
        with:
          repository: ${{ steps.config.outputs.TRACKER_REPO }}
          track: ${{ steps.config.outputs.BUILD_PROFILE }}

      - name: Write results to file
        run: |
          (cat << EOF
          ${{ steps.layers.outputs.layers }}
          EOF
          ) > prunable_layers.log

      - name: Delete old docker layers from GitHub Package
        uses: mentalsmash/actions/ci/admin@master
        if: steps.config.outputs.GH_PACKAGE
        with:
          image: ${{ steps.config.outputs.ADMIN_IMAGE }}
          token: ${{ secrets.PACKAGE_VERSIONS_PAT }}
          github-token: ${{ steps.config.outputs.LOGIN_GITHUB && secrets.GITHUB_TOKEN || '' }}
          github-user: ${{ steps.config.outputs.LOGIN_GITHUB && github.actor || '' }}
          dockerhub-token: ${{ steps.config.outputs.LOGIN_DOCKERHUB && secrets.DOCKERHUB_TOKEN || '' }}
          dockerhub-user: ${{ steps.config.outputs.LOGIN_DOCKERHUB && secrets.DOCKERHUB_USERNAME || '' }}
          args: |
            -c
            ${{ github.run_id }}
            prune-versions
            -o
            ${{ steps.config.outputs.GH_ORG }}
            -p
            ${{ steps.config.outputs.GH_PACKAGE }}
            -P
            /workspace/prunable_layers.log

      - name: Delete pruned versions
        uses: mentalsmash/actions/release-tracker/delete@master
        if: steps.config.outputs.GH_PACKAGE && steps.layers.outputs.versions
        with:
          repository: ${{ steps.config.outputs.TRACKER_REPO }}
          track: ${{ steps.config.outputs.BUILD_PROFILE }}
          entries: ${{ steps.layers.outputs.versions }}

