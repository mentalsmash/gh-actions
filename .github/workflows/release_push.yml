name: Release (Push)
run-name: |
  release (push) [${{github.ref_type == 'branch' && 'nightly' || 'stable'}}, ${{github.ref_name}}]

on:
  workflow_dispatch:

  workflow_call:

concurrency:
  group: release-push-${{github.ref_type == 'tag' && 'stable' || 'nightly' }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

env:
  CLONE_DIR: src/repo

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
    - name: Clone source repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.CLONE_DIR }}
        submodules: true

    - name: Load configuration
      uses: mentalsmash/actions/pyconfig/configuration@master
      with:
        clone-dir: ${{ env.CLONE_DIR }}

    - name: Configure workflow
      id: config
      run: |
        (
          printf -- "ADMIN_IMAGE=%s\n" "$(jq '.ci.images.admin.image' -r pyconfig.json)"
          printf -- "LOGIN_DOCKERHUB=%s\n" "$(jq '.ci.images.admin.login.dockerhub' -r pyconfig.json)"
          printf -- "LOGIN_GITHUB=%s\n" "$(jq '.ci.images.admin.login.github' -r pyconfig.json)"

          printf -- "BUILD_PROFILE=%s\n" "$(jq '.build.profile' -r pyconfig.json)"
          printf -- "BUILD_VERSION=%s\n" "$(jq '.build.version' -j pyconfig.json)"
          printf -- "%s\n" "DOCKER_TAGS_CONFIG<<EOF"
          # printf -- "%s\n" "$(jq '.release.tags_config' -j pyconfig.json)"
          jq '.release.tags_config' -j pyconfig.json
          echo
          printf -- "%s\n" EOF
          printf -- "%s\n" "DOCKER_FLAVOR_CONFIG<<EOF"
          # printf -- "%s\n" "$(jq '.release.flavor_config' -j pyconfig.json)"
          jq '.release.flavor_config' -j pyconfig.json
          echo
          printf -- "%s\n" EOF
          printf -- "DOCKER_BUILD_PLATFORMS=%s\n" "$(jq '.release.build_platforms_config' -j pyconfig.json)"
          printf -- "PRERELEASE_IMAGE=%s\n" "$(jq '.release.prerelease_image' -j pyconfig.json)"
          printf -- "%s\n" "RELEASE_REPOS<<EOF"
          # printf -- "%s\n" "$(jq '.release.final_repos_config' -j pyconfig.json)"
          jq '.release.final_repos_config' -j pyconfig.json
          echo
          printf -- "%s\n" EOF

          printf -- "GH_RELEASE_URL=%s\n" "$(jq '.release.gh.release.url' -j pyconfig.json)"
          printf -- "GH_ORG=%s\n" "$(jq '.release.gh.org' -j pyconfig.json)"
          printf -- "GH_PACKAGE=%s\n" "$(jq '.release.gh.package' -j pyconfig.json)"
          printf -- "GH_PACKAGE_IMAGE=%s\n" "$(jq '.release.gh.package_image' -j pyconfig.json)"

          echo DEB_BASE_IMAGES_MATRIX=$(jq '.debian.builder.base_images_matrix' -r pyconfig.json)
          echo DEB_BUILD_ARCHITECTURES_MATRIX=$(jq '.debian.builder.architectures_matrix' -r pyconfig.json)
          echo DEB_ARTIFACTS_PREFIX=$(jq '.debian.artifacts.prefix' -r pyconfig.json)

          echo TRACKER_ARTIFACT_PREFIX=$(jq '.release.tracker.artifact' -r pyconfig.json)
          echo TRACKER_USER_NAME=$(jq '.release.tracker.user.name' -r pyconfig.json)
          echo TRACKER_USER_EMAIL=$(jq '.release.tracker.user.email' -r pyconfig.json)
          echo TRACKER_REPO=$(jq '.release.tracker.repository' -r pyconfig.json)

          echo RELEASE_GH_CREATE=$(jq '.release.gh.release.create' -r pyconfig.json)
          echo RELEASE_NOTES_ARTIFACTS_PREFIX=$(jq '.release.notes.artifacts_prefix' -r pyconfig.json)
          echo RELEASE_NOTES_ARTIFACT=$(jq '.release.notes.artifact' -r pyconfig.json)

          echo "RELEASE_FINAL_IMAGES<<EOF"
          # printf -- "%s\n" "$(jq '.release.final_images_config' -r pyconfig.json)"
          jq '.release.final_images_config' -r pyconfig.json
          echo
          echo EOF

          echo BADGE_BASE_IMAGE_COLOR=$(jq '.release.badge.base_image.color' -r pyconfig.json)
          echo BADGE_BASE_IMAGE_FILENAME=$(jq '.release.badge.base_image.filename' -r pyconfig.json)
          echo BADGE_BASE_IMAGE_GIST=$(jq '.release.badge.base_image.gist' -r pyconfig.json)
          echo BADGE_BASE_IMAGE_MESSAGE=$(jq '.release.badge.base_image.message' -r pyconfig.json)
          echo BADGE_VERSION_COLOR=$(jq '.release.badge.version.color' -r pyconfig.json)
          echo BADGE_VERSION_FILENAME=$(jq '.release.badge.version.filename' -r pyconfig.json)
          echo BADGE_VERSION_GIST=$(jq '.release.badge.version.gist' -r pyconfig.json)
          echo BADGE_VERSION_MESSAGE=$(jq '.release.badge.version.message' -r pyconfig.json)
        ) | tee -a ${GITHUB_OUTPUT}
      
    - name: Build and push final images
      uses: mentalsmash/actions/docker/builder@master
      with:
        base-image: ${{ steps.config.outputs.PRERELEASE_IMAGE }}
        build-platforms: ${{ steps.config.outputs.DOCKER_BUILD_PLATFORMS }}
        dockerfile: ${{ env.CLONE_DIR }}/docker/release/Dockerfile
        context: ${{ env.CLONE_DIR }}
        image-repos: ${{ steps.config.outputs.RELEASE_REPOS }}
        image-flavor-config: ${{ steps.config.outputs.DOCKER_FLAVOR_CONFIG }}
        image-tags-config: ${{ steps.config.outputs.DOCKER_TAGS_CONFIG }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        github-user: ${{ github.actor }}
        dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
        dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
        action: push

    - name: Wait for package to be published
      run: |
        sleep 5

    - name: Lookup hash of top-level docker manifest
      uses: mentalsmash/actions/ci/admin@master
      with:
        image: ${{ steps.config.outputs.ADMIN_IMAGE }}
        token: ${{ secrets.GITHUB_TOKEN }}
        github-token: ${{ steps.config.outputs.LOGIN_GITHUB && secrets.GITHUB_TOKEN || '' }}
        github-user: ${{ steps.config.outputs.LOGIN_GITHUB && github.actor || '' }}
        dockerhub-token: ${{ steps.config.outputs.LOGIN_DOCKERHUB && secrets.DOCKERHUB_TOKEN || '' }}
        dockerhub-user: ${{ steps.config.outputs.LOGIN_DOCKERHUB && secrets.DOCKERHUB_USERNAME || '' }}
        args: |
          -c
          ${{ github.run_id }}
          select-versions
          -o
          ${{ steps.config.outputs.GH_ORG }}
          -p
          ${{ steps.config.outputs.GH_PACKAGE }}
          -t
          ${{ steps.config.outputs.BUILD_PROFILE }}

    - name: Extract hash of top-level docker manifests
      id: hashes
      run: |
        (
          printf -- "GH_MANIFEST_HASH=%s\n" \
            "$(grep "'${{ steps.config.outputs.BUILD_PROFILE }}'" ci-admin.log | awk '{ print $2; }' | tee gh-manifest.hash)"
        ) >> ${GITHUB_OUTPUT}

    - name: Clone release tracker
      uses: mentalsmash/actions/release-tracker/checkout@master
      with:
        repository: ${{ steps.config.outputs.TRACKER_REPO }}
        user-name: ${{ steps.config.outputs.TRACKER_USER_NAME }}
        user-email: ${{ steps.config.outputs.TRACKER_USER_EMAIL }}
        token: ${{ secrets.RELEASE_TRACKER_REPO_PAT }}
    
    - name: Download Debian artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.config.outputs.DEB_ARTIFACTS_PREFIX }}*
        path: ${{ github.workspace }}/artifacts
        merge-multiple: true

    - name: Create and push release tracker entry
      uses: mentalsmash/actions/release-tracker/add-docker@master
      with:
        repository: ${{ steps.config.outputs.TRACKER_REPO }}
        track: ${{ steps.config.outputs.BUILD_PROFILE }}
        version: ${{ steps.config.outputs.BUILD_VERSION }}
        images: ${{ steps.config.outputs.RELEASE_FINAL_IMAGES }}
        hashes: |
          ${{ steps.config.outputs.GH_PACKAGE_IMAGE }}=${{ steps.hashes.outputs.GH_MANIFEST_HASH }}

    - name: Generate release tracker artifacts
      run: |
        mkdir -p artifacts/
        echo $(cd src/tracker && git rev-parse --short HEAD) >> artifacts/release-tracker.commit
        mv -v release-tracker-* artifacts/

    - name: Generate summary
      uses: mentalsmash/actions/pyconfig/summary@master
      with:
        clone-dir: ${{ env.CLONE_DIR }}
        workflow: release_notes
        output: release-notes.md
    
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md

    - name: Create new GitHub release for named release
      if: steps.config.outputs.RELEASE_GH_CREATE
      uses: softprops/action-gh-release@v2
      with:
        body_path: release-notes.md
        files: |
          artifacts/*.deb
    
    - name: Write release summary
      run: |
        (
          cat release-notes.md >> ${GITHUB_STEP_SUMMARY}

          if [ -n "${{ steps.config.outputs.RELEASE_GH_CREATE }}" ]; then
            printf -- "\n"
            printf -- "## GitHub Release\n"
            printf -- "\n"
            printf -- "- [%s](%s)\n" \
              "${{ steps.config.outputs.BUILD_VERSION }}" \
              "${{ steps.config.outputs.GH_RELEASE_URL }}"
            printf -- "\n"
          fi
        ) >> ${GITHUB_STEP_SUMMARY}

    - name: Update version badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        label: version
        auth: ${{ secrets.GIST_UPDATE_TOKEN }}
        color: ${{ steps.config.outputs.BADGE_VERSION_COLOR }}
        filename: ${{ steps.config.outputs.BADGE_VERSION_FILENAME }}
        gistID: ${{ steps.config.outputs.BADGE_VERSION_GIST }}
        message: ${{ steps.config.outputs.BADGE_VERSION_MESSAGE }}

    - name: Update base image badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        label: base image
        auth: ${{ secrets.GIST_UPDATE_TOKEN }}
        color: ${{ steps.config.outputs.BADGE_BASE_COLOR }}
        filename: ${{ steps.config.outputs.BADGE_BASE_IMAGE_FILENAME }}
        gistID: ${{ steps.config.outputs.BADGE_BASE_IMAGE_GIST }}
        message: ${{ steps.config.outputs.BADGE_BASE_IMAGE_MESSGE }}
